/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visualTokens;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import visual.interfazUsuario;

/**
 *
 * @author denil
 */
public class TokensVisuales extends javax.swing.JFrame {

    /**
     * Creates new form TokensVisuales
     */
    public TokensVisuales() {
        initComponents();
        
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        lexicoVisual = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTokens = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        seleccionToken = new javax.swing.JTextArea();
        jScrollPane3 = new javax.swing.JScrollPane();
        lexicoTabla = new javax.swing.JTable();
        identificador = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        buscarText = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();
        error = new javax.swing.JButton();
        reservada = new javax.swing.JButton();
        number = new javax.swing.JButton();
        signos = new javax.swing.JButton();
        cadenas = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setType(java.awt.Window.Type.UTILITY);

        lexicoVisual.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        tablaTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo Token", "Patron", "Lexema", "Fila", "Columna"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tablaTokens);
        if (tablaTokens.getColumnModel().getColumnCount() > 0) {
            tablaTokens.getColumnModel().getColumn(0).setResizable(false);
            tablaTokens.getColumnModel().getColumn(1).setResizable(false);
            tablaTokens.getColumnModel().getColumn(2).setResizable(false);
            tablaTokens.getColumnModel().getColumn(3).setResizable(false);
            tablaTokens.getColumnModel().getColumn(4).setResizable(false);
        }

        jButton2.setText("Token");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        seleccionToken.setColumns(20);
        seleccionToken.setRows(5);
        seleccionToken.setText("Visualización de Tokens");
        jScrollPane2.setViewportView(seleccionToken);

        lexicoTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tipo Token", "Patron", "Lexema", "Fila"
            }
        ));
        jScrollPane3.setViewportView(lexicoTabla);

        identificador.setText("Identificadores");
        identificador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identificadorActionPerformed(evt);
            }
        });

        jLabel1.setText("Buscador de Token");

        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });

        error.setText("ERRORES");
        error.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorActionPerformed(evt);
            }
        });

        reservada.setText("Palabras Reservadas");
        reservada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservadaActionPerformed(evt);
            }
        });

        number.setText("Números");
        number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberActionPerformed(evt);
            }
        });

        signos.setText("Signos");
        signos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signosActionPerformed(evt);
            }
        });

        cadenas.setText("Cadenas");
        cadenas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadenasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(buscar)
                        .addGap(121, 121, 121)
                        .addComponent(lexicoVisual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(79, 79, 79))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(6, 6, 6)
                                        .addComponent(jButton2))
                                    .addComponent(jLabel1))
                                .addGap(12, 12, 12)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jScrollPane2)
                                    .addComponent(buscarText)))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 504, Short.MAX_VALUE)))
                        .addGap(18, 18, 18)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 456, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(identificador)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(31, 31, 31)
                                .addComponent(signos)
                                .addGap(18, 18, 18)
                                .addComponent(cadenas)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(error)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(reservada)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(number)))))
                .addGap(16, 16, 16))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 178, Short.MAX_VALUE)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(identificador)
                                .addComponent(error))
                            .addComponent(jButton2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(lexicoVisual, javax.swing.GroupLayout.DEFAULT_SIZE, 80, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(0, 0, Short.MAX_VALUE)
                                        .addComponent(jLabel1))
                                    .addComponent(buscarText))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(buscar)
                                .addGap(16, 16, 16))))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(reservada)
                            .addComponent(number))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cadenas)
                            .addComponent(signos))
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
    int fila = tablaTokens.getSelectedRow();
    if (fila != -1) {
        String datos = "Tipo de Token: "+tablaTokens.getValueAt(fila, 0) + "\n"
                              +"Patron: "+ tablaTokens.getValueAt(fila, 1) + "\n"
                              +"Lexema: "+ tablaTokens.getValueAt(fila, 2) + "\n"
                              +"Fila: "+ tablaTokens.getValueAt(fila, 3) + "\n"
                              +"Columna: "+ tablaTokens.getValueAt(fila, 4);
        seleccionToken.setText(datos);
    } else {
        seleccionToken.setText("No se ha seleccionado ninguna fila.");
    }
    }//GEN-LAST:event_jButton2ActionPerformed

    private void identificadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_identificadorActionPerformed
    //identificadores con una funcion en la original
    identificadores();
    

    }//GEN-LAST:event_identificadorActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        //metodo para buscar un token en concreto
        buscarTabla();

    }//GEN-LAST:event_buscarActionPerformed

    private void errorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorActionPerformed
    errores();
    }//GEN-LAST:event_errorActionPerformed

    private void reservadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservadaActionPerformed
    reservadas();
    }//GEN-LAST:event_reservadaActionPerformed

    private void numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberActionPerformed
    numeros();
    }//GEN-LAST:event_numberActionPerformed

    private void signosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signosActionPerformed
    signos();
    }//GEN-LAST:event_signosActionPerformed

    private void cadenasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadenasActionPerformed
    cadenas();
    }//GEN-LAST:event_cadenasActionPerformed
  
    
    
    
    
    
    
    //aca comienzan los distintos tipos de filtros para los lexemas o tipos de indeticadores
    //buscar con palabra especifica
    private void buscarTabla() {
        //buscar lexema 
    String buscar = buscarText.getText().toLowerCase();
    DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
    DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
    filtrado.setRowCount(0);

        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroLexema = original.getValueAt(i, 2).toString().toLowerCase();
            if(filtroLexema.contains(buscar)){
              Object[] contenido={
                  original.getValueAt(i, 0),
                  original.getValueAt(i, 1),
                  original.getValueAt(i, 2),
                  original.getValueAt(i, 3)
              };  
              filtrado.addRow(contenido);
            }
        }
   
    }
    //buscar identificadores
    private void identificadores() {
        String Token = "Identificador";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar errores lexicos
    private void errores() {
        String Token = "ERROR";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar palabras reservadas en el programa
    private void reservadas() {
        String Token = "Palabra reservada";
        String Token1 = "Booleana";
        String Token2 = "Logicos";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token) || filtroToken.equalsIgnoreCase(Token1)
                || filtroToken.equalsIgnoreCase(Token2)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar numeros
    private void numeros() {
        String Token = "Numero entero";
        String Token1 = "Numero decimal";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token) || filtroToken.equalsIgnoreCase(Token1)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar signos 
    private void signos() {
        String Token = "Otros";
        String Token1 = "Aritmetico";
        String Token2 = "Asignacion";
        String Token3 = "Comparación";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token) || filtroToken.equalsIgnoreCase(Token1)
                    || filtroToken.equalsIgnoreCase(Token2) || filtroToken.equalsIgnoreCase(Token3)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar distintos tipos de signos
    private void cadenas() {
        String Token = "Comentario";
        String Token1 = "Cadena Simple";
        String Token2 = "Cadena";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token) || filtroToken.equalsIgnoreCase(Token1)
                    || filtroToken.equalsIgnoreCase(Token2)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    
    /**
     * @param args the command line arguments
     */
     public JTable getTablaTokens() {
        return tablaTokens;
    }

    public JTable getLexicoTabla() {
        return lexicoTabla;
    }
    
    
    
    
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TokensVisuales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TokensVisuales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TokensVisuales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TokensVisuales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TokensVisuales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscar;
    private javax.swing.JTextField buscarText;
    private javax.swing.JButton cadenas;
    private javax.swing.JButton error;
    private javax.swing.JButton identificador;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable lexicoTabla;
    private javax.swing.JPanel lexicoVisual;
    private javax.swing.JButton number;
    private javax.swing.JButton reservada;
    private javax.swing.JTextArea seleccionToken;
    private javax.swing.JButton signos;
    private javax.swing.JTable tablaTokens;
    // End of variables declaration//GEN-END:variables
}

/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package visualTokens;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import visual.interfazUsuario;

/**
 *
 * @author denil
 */
public class TokensVisuales extends javax.swing.JFrame {

    /**
     * Creates new form TokensVisuales
     */
    public TokensVisuales() {
        initComponents();
        
    }

   

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        lexicoTabla = new javax.swing.JTable();
        identificador = new javax.swing.JButton();
        error = new javax.swing.JButton();
        reservada = new javax.swing.JButton();
        number = new javax.swing.JButton();
        signos = new javax.swing.JButton();
        cadenas = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tablaTokens = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        seleccionToken = new javax.swing.JTextArea();
        buscarText = new javax.swing.JTextField();
        buscar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setLocationByPlatform(true);
        setType(java.awt.Window.Type.UTILITY);

        jPanel2.setBackground(new java.awt.Color(51, 51, 51));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        lexicoTabla.setBackground(new java.awt.Color(102, 102, 102));
        lexicoTabla.setForeground(new java.awt.Color(255, 255, 255));
        lexicoTabla.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Tipo Token", "Patron", "Lexema", "Fila"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        lexicoTabla.setSelectionBackground(new java.awt.Color(204, 204, 204));
        lexicoTabla.setSelectionForeground(new java.awt.Color(0, 0, 204));
        jScrollPane3.setViewportView(lexicoTabla);
        if (lexicoTabla.getColumnModel().getColumnCount() > 0) {
            lexicoTabla.getColumnModel().getColumn(0).setResizable(false);
            lexicoTabla.getColumnModel().getColumn(1).setResizable(false);
            lexicoTabla.getColumnModel().getColumn(2).setResizable(false);
            lexicoTabla.getColumnModel().getColumn(3).setResizable(false);
        }

        jPanel2.add(jScrollPane3, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 30, 440, 178));

        identificador.setBackground(new java.awt.Color(102, 102, 102));
        identificador.setText("Identificadores");
        identificador.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                identificadorActionPerformed(evt);
            }
        });
        jPanel2.add(identificador, new org.netbeans.lib.awtextra.AbsoluteConstraints(540, 240, -1, -1));

        error.setBackground(new java.awt.Color(102, 102, 102));
        error.setText("ERRORES");
        error.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                errorActionPerformed(evt);
            }
        });
        jPanel2.add(error, new org.netbeans.lib.awtextra.AbsoluteConstraints(670, 240, -1, -1));

        reservada.setBackground(new java.awt.Color(102, 102, 102));
        reservada.setText("Palabras Reservadas");
        reservada.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                reservadaActionPerformed(evt);
            }
        });
        jPanel2.add(reservada, new org.netbeans.lib.awtextra.AbsoluteConstraints(770, 240, -1, -1));

        number.setBackground(new java.awt.Color(102, 102, 102));
        number.setText("Números");
        number.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                numberActionPerformed(evt);
            }
        });
        jPanel2.add(number, new org.netbeans.lib.awtextra.AbsoluteConstraints(920, 240, -1, -1));

        signos.setBackground(new java.awt.Color(102, 102, 102));
        signos.setText("Signos");
        signos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                signosActionPerformed(evt);
            }
        });
        jPanel2.add(signos, new org.netbeans.lib.awtextra.AbsoluteConstraints(700, 280, -1, -1));

        cadenas.setBackground(new java.awt.Color(102, 102, 102));
        cadenas.setText("Cadenas");
        cadenas.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cadenasActionPerformed(evt);
            }
        });
        jPanel2.add(cadenas, new org.netbeans.lib.awtextra.AbsoluteConstraints(790, 280, -1, -1));

        tablaTokens.setBackground(new java.awt.Color(102, 102, 102));
        tablaTokens.setForeground(new java.awt.Color(255, 255, 255));
        tablaTokens.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tipo Token", "Patron", "Lexema", "Fila", "Columna"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tablaTokens.setGridColor(new java.awt.Color(102, 102, 102));
        tablaTokens.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tablaTokens.setSelectionForeground(new java.awt.Color(0, 0, 204));
        jScrollPane1.setViewportView(tablaTokens);
        if (tablaTokens.getColumnModel().getColumnCount() > 0) {
            tablaTokens.getColumnModel().getColumn(1).setResizable(false);
            tablaTokens.getColumnModel().getColumn(3).setResizable(false);
            tablaTokens.getColumnModel().getColumn(4).setResizable(false);
        }

        jPanel2.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 10, 470, 250));

        jButton2.setBackground(new java.awt.Color(102, 102, 102));
        jButton2.setText("Token");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });
        jPanel2.add(jButton2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 270, -1, -1));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Buscador de Token");
        jPanel2.add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(10, 420, -1, -1));

        seleccionToken.setEditable(false);
        seleccionToken.setBackground(new java.awt.Color(102, 102, 102));
        seleccionToken.setColumns(20);
        seleccionToken.setForeground(new java.awt.Color(255, 255, 255));
        seleccionToken.setRows(5);
        seleccionToken.setText("Visualización de Tokens");
        seleccionToken.setDisabledTextColor(new java.awt.Color(255, 255, 255));
        jScrollPane2.setViewportView(seleccionToken);

        jPanel2.add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(90, 270, 390, 120));

        buscarText.setBackground(new java.awt.Color(102, 102, 102));
        buscarText.setForeground(new java.awt.Color(255, 255, 255));
        jPanel2.add(buscarText, new org.netbeans.lib.awtextra.AbsoluteConstraints(120, 410, 370, 30));

        buscar.setBackground(new java.awt.Color(102, 102, 102));
        buscar.setText("Buscar");
        buscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buscarActionPerformed(evt);
            }
        });
        jPanel2.add(buscar, new org.netbeans.lib.awtextra.AbsoluteConstraints(260, 450, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 487, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cadenasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cadenasActionPerformed
        cadenas();
    }//GEN-LAST:event_cadenasActionPerformed

    private void signosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_signosActionPerformed
        signos();
    }//GEN-LAST:event_signosActionPerformed

    private void reservadaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_reservadaActionPerformed
        reservadas();
    }//GEN-LAST:event_reservadaActionPerformed

    private void numberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_numberActionPerformed
        numeros();
    }//GEN-LAST:event_numberActionPerformed

    private void errorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_errorActionPerformed
        errores();
    }//GEN-LAST:event_errorActionPerformed

    private void buscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buscarActionPerformed
        //metodo para buscar un token en concreto
        buscarTabla();
    }//GEN-LAST:event_buscarActionPerformed

    private void identificadorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_identificadorActionPerformed
        //identificadores con una funcion en la original
        identificadores();

    }//GEN-LAST:event_identificadorActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        int fila = tablaTokens.getSelectedRow();
        if (fila != -1) {
            String datos = "Tipo de Token: "+tablaTokens.getValueAt(fila, 0) + "\n"
            +"Patron: "+ tablaTokens.getValueAt(fila, 1) + "\n"
            +"Lexema: "+ tablaTokens.getValueAt(fila, 2) + "\n"
            +"Fila: "+ tablaTokens.getValueAt(fila, 3) + "\n"
            +"Columna: "+ tablaTokens.getValueAt(fila, 4);
            seleccionToken.setText(datos);
        } else {
            seleccionToken.setText("No se ha seleccionado ninguna fila.");
        }
    }//GEN-LAST:event_jButton2ActionPerformed
  
    
    
    
    
    
    
    //aca comienzan los distintos tipos de filtros para los lexemas o tipos de indeticadores
    //buscar con palabra especifica
    private void buscarTabla() {
        //buscar lexema 
    String buscar = buscarText.getText().toLowerCase();
    DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
    DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
    filtrado.setRowCount(0);

        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroLexema = original.getValueAt(i, 2).toString().toLowerCase();
            if(filtroLexema.contains(buscar)){
              Object[] contenido={
                  original.getValueAt(i, 0),
                  original.getValueAt(i, 1),
                  original.getValueAt(i, 2),
                  original.getValueAt(i, 3)
              };  
              filtrado.addRow(contenido);
            }
        }
   
    }
    //buscar identificadores
    private void identificadores() {
        String Token = "Identificador";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar errores lexicos
    private void errores() {
        String Token = "ERROR";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar palabras reservadas en el programa
    private void reservadas() {
        String Token = "Palabra reservada";
        String Token1 = "Booleana";
        String Token2 = "Logicos";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token) || filtroToken.equalsIgnoreCase(Token1)
                || filtroToken.equalsIgnoreCase(Token2)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar numeros
    private void numeros() {
        String Token = "Numero entero";
        String Token1 = "Numero decimal";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token) || filtroToken.equalsIgnoreCase(Token1)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar signos 
    private void signos() {
        String Token = "Otros";
        String Token1 = "Aritmetico";
        String Token2 = "Asignacion";
        String Token3 = "Comparación";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token) || filtroToken.equalsIgnoreCase(Token1)
                    || filtroToken.equalsIgnoreCase(Token2) || filtroToken.equalsIgnoreCase(Token3)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    //buscar distintos tipos de signos
    private void cadenas() {
        String Token = "Comentario";
        String Token1 = "Cadena Simple";
        String Token2 = "Cadena";
        DefaultTableModel filtrado = (DefaultTableModel) lexicoTabla.getModel();
        DefaultTableModel original = (DefaultTableModel) tablaTokens.getModel();
        filtrado.setRowCount(0);
        for (int i = 0; i < original.getRowCount(); i++) {
            String filtroToken = original.getValueAt(i, 0).toString();
            if (filtroToken.equalsIgnoreCase(Token) || filtroToken.equalsIgnoreCase(Token1)
                    || filtroToken.equalsIgnoreCase(Token2)) {
                Object[] contenido = {
                    original.getValueAt(i, 0),
                    original.getValueAt(i, 1),
                    original.getValueAt(i, 2),
                    original.getValueAt(i, 3)
                };
                filtrado.addRow(contenido);
            }
        }

    }
    
    /**
     * @param args the command line arguments
     */
     public JTable getTablaTokens() {
        return tablaTokens;
    }

    public JTable getLexicoTabla() {
        return lexicoTabla;
    }
    
    
    
    
    
    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TokensVisuales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TokensVisuales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TokensVisuales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TokensVisuales.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TokensVisuales().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buscar;
    private javax.swing.JTextField buscarText;
    private javax.swing.JButton cadenas;
    private javax.swing.JButton error;
    private javax.swing.JButton identificador;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable lexicoTabla;
    private javax.swing.JButton number;
    private javax.swing.JButton reservada;
    private javax.swing.JTextArea seleccionToken;
    private javax.swing.JButton signos;
    private javax.swing.JTable tablaTokens;
    // End of variables declaration//GEN-END:variables
}
